class Solution {
    class UnionFind {
        public int[] parent, size;
        UnionFind(int n) {
            parent = new int[n];
            size = new int[n];
            for(int i = 0; i < n; i++) {
                parent[i] = i;
                size[i] = 1;
            }
        }
        public int find(int x) {
            return x != parent[x] ? x = find(parent[x]) : x;
        }
        public void union(int x, int y) {
            int a = find(x), b = find(y);
            if(a != b) {
                if(size[a] < size[b]) {
                    parent[a] = b;
                    size[b] += size[a];
                } else {
                    parent[b] = a;
                    size[a] += size[b];
                }
            }
        }
    }
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length, ans = initial[0], max = 0;
        boolean[] infected = new boolean[n];
        for(int u: initial) infected[u] = true;
        UnionFind uf = new UnionFind(n);
        for(int i = 0; i < n; i++) {
            if(!infected[i]) {
                for(int j = i + 1; j < n; j++) {
                    if(!infected[j] && graph[i][j] == 1) uf.union(i, j);
                }
            }
        }
        int[] count = new int[n];
        Set<Integer>[] component = new Set[n];
        for(int u: initial) {
            component[u] = new HashSet<>();
            for(int v = 0; v < n; v++) {
                if(!infected[v] && graph[u][v] == 1) component[u].add(uf.find(v));
            }
            for(int v: component[u]) count[v]++;
        }
        for(int u: initial) {
            int save = 0;
            for(int v: component[u]) {
                if(count[v] == 1) save += uf.size[v];
            }
            if(save > max || save == max && u < ans) {
                max = save;
                ans = u;
            }
        }
        return ans;
    }
}