class Solution {
    public int minMalwareSpread(int[][] grid, int[] initial) {
        int n = grid.length;
        int m = initial.length;
        int[] counts = new int[n];
        HashSet<Integer>[] vis = new HashSet[n];
        for(int i=0; i<n; i++)
        {
            vis[i] = new HashSet<>();
        }
        HashSet<Integer> in = new HashSet<>();
        for(int init : initial)
        {
            in.add(init);
        }
        for(int node : initial)
        {
            dfs(node, vis, grid, node);
        }
        for(int i=0; i<n; i++)
        {
            if(vis[i].size() == 1)
            {
                counts[vis[i].iterator().next()]++;
            }
        }
        int max = -1;
        int ans = -1;
        for(int i=0; i<n; i++)
        {
            // System.out.println(counts[i]+" for "+i);
            if(max < counts[i] && in.contains(i))
            {
                max = counts[i];
                ans = i;
            }
        }
        return ans;
    }
    private void dfs(int current, HashSet<Integer>[] vis, int[][] grid, int start)
    {
        vis[current].add(start);
        int n = grid.length;
        for(int i=0; i<n; i++)
        {
            if(i == current || grid[current][i] == 0)
            {
                continue;
            }
            if(!vis[i].contains(start))
            {
                dfs(i, vis, grid, start);
            }
        }
    }
}